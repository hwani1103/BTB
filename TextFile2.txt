



권장 분석 순서:
1단계: 기반 시스템 (가장 독립적)
HealthBar.cs → 다른 스크립트에 의존하지 않고 UI만 담당. 가장 이해하기 쉬움

2단계: 핵심 게임 오브젝트
HeroController.cs → 플레이어가 직접 조작하는 캐릭터. 게임의 중심이 되는 로직

EnemyUnit.cs → 적 AI 로직. HeroController와 상호작용하지만 독립적으로도 이해 가능

3단계: 생성/관리 시스템
EnemySpawner.cs → EnemyUnit을 생성하고 관리. EnemyUnit 이해 후 보면 쉬움

4단계: 입력/카메라 시스템
CameraController.cs → 상대적으로 독립적이지만 GameManager와 연결됨

5단계: 통합 관리자 (가장 복잡)
GameManager.cs → 모든 시스템을 아우르는 최상위 관리자. 다른 모든 스크립트 이해 후 마지막에

이 순서를 권장하는 이유:
의존성이 적은 것부터 → 복잡한 것 순
게임 플레이 흐름 순 (캐릭터 → 적 → 생성 → 카메라 → 관리)
각 단계에서 이전 지식을 활용할 수 있음

특히 HealthBar부터 시작하면 Unity UI 시스템과 컴포넌트 참조 방식을 먼저 이해할 수 있어서 나머지 스크립트 이해가 수월해집니다.


분석 Tip
Inspector 먼저 확인
해당 오브젝트 선택
스크립트 컴포넌트의 모든 public 필드 값 확인
어떤 프리팹/오브젝트가 드래그되어 있는지 기록


그 다음 코드 읽기
Inspector에서 본 필드들이 코드에서 어떻게 사용되는지
null 체크 로직과 실제 할당값 비교
기본값과 실제 설정값 비교